#ifndef AC_BINDING_C_CORE_PROCESSOR_H
#define AC_BINDING_C_CORE_PROCESSOR_H

#include <stdint.h>

#include "AC/Core/Image.h"

#include "CACExport.h" // Generated by CMake

#ifdef __cplusplus
#   define CAC_API extern "C" CAC_EXPORT
#else
#   define CAC_API CAC_EXPORT
#endif

enum ac_processor_type
{
    AC_PROCESSOR_CPU    = 0,
    AC_PROCESSOR_OPENCL = 1,
    AC_PROCESSOR_CUDA   = 2
};

typedef struct ac_processor
{
    int type;
    int device;
    const char* model;
    struct ac_processor_handle* hptr;
} ac_processor;

CAC_API int ac_processor_ref(const ac_processor* src, ac_processor* dst);
CAC_API void ac_processor_unref(ac_processor* processor);
CAC_API int ac_processor_create(ac_processor* processor);
CAC_API int ac_processor_process(ac_processor* processor, const ac_image* src, ac_image* dst, double factor);
CAC_API int ac_processor_ok(const ac_processor* processor);
CAC_API const char* ac_processor_error(const ac_processor* processor);
CAC_API const char* ac_processor_name(const ac_processor* processor);

CAC_API const char* ac_processor_info(int processor_type);
CAC_API int ac_processor_type(const char* processor_type_name);
CAC_API const char* ac_processor_type_name(int processor_type);

#endif
